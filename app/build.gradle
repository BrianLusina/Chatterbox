apply plugin: "com.android.application"
apply plugin: 'kotlin-android'
// apply plugin: 'kotlin-kapt'
apply plugin: "io.fabric"

repositories {
    mavenCentral()
    flatDir {
        dirs "libs"
    }
    maven { url "https://maven.fabric.io/public" }
    mavenCentral()
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "com.chatterbox"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        multiDexEnabled true
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        resValue "string", "facebook_app_id", (project.findProperty("FacebookAppId") ?: "")
        resValue "string", "fabric_api_key", (project.findProperty("FabricApiKey") ?: "")

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    /**
     * The aapt tool may inflate PNG files that have already been compressed.
     * To prevent this, you can use the cruncherEnabled flag in Gradle to disable this process for
     * PNG files:
     * */
    aaptOptions {
        cruncherEnabled = false
    }

    packagingOptions {
        exclude "META-INF/DEPENDENCIES"
        exclude "META-INF/NOTICE"
        exclude "META-INF/LICENSE"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }

        debug {
            minifyEnabled false
            shrinkResources false
            testCoverageEnabled true
            applicationIdSuffix ".debug"
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // used to track the time and date this apk was released
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def date = new Date()
            def formattedDate = date.format("yyyyMMdd_HHmmss")
            outputFileName = "chatterbox-${variant.buildType}-${variant.name}-v${variant.versionName}-${formattedDate}.apk"
        }
    }

    sourceSets {
        main{
            java.srcDirs += "src/main/kotlin"
            res.srcDirs = [
                    "src/main/res/layouts/auth_feature",
                    "src/main/res/layouts/main_feature",
                    "src/main/res/layouts/splash_feature",
                    "src/main/res/layouts/chats_feature",
                    "src/main/res/layouts/components",
                    "src/main/res/layouts",
                    "src/main/res",
            ]
        }

        androidTest{
            java.srcDirs += "src/androidTest/kotlin"
        }

        test{
            java.srcDirs += "src/test/kotlin"
        }
    }

    buildTypes.each {
        it.buildConfigField "String", "TWITTER_CONSUMER_KEY", TwitterConsumerKey
        it.buildConfigField "String", "TWITTER_SECRET", TwitterSecret
        it.buildConfigField "String", "FACEBOOK_APP_ID", FacebookAppId
        it.buildConfigField "String", "FABRIC_API_KEY", FabricApiKey
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
}

configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$supportLibVersion"
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // Android dependencies
    implementation "com.android.support.constraint:constraint-layout:$constaintLayoutVersion"
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation "com.android.support:design:$supportLibVersion"
    implementation "com.android.support:support-annotations:$supportLibVersion"
    implementation "com.android.support:support-v4:$supportLibVersion"
    implementation "com.android.support:percent:$supportLibVersion"
    implementation "com.android.support:recyclerview-v7:$supportLibVersion"

    // kotlin manenos ;D
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    implementation "com.google.android.gms:play-services-auth:$googlePlayServices"

    // firebase dependencies
    implementation "com.google.firebase:firebase-auth:$firebaseVersion"
    implementation "com.google.firebase:firebase-database:$firebaseVersion"
    implementation "com.google.firebase:firebase-config:$firebaseVersion"
    implementation "com.google.android.gms:play-services-appinvite:$firebaseVersion"
    implementation "com.google.firebase:firebase-messaging:$firebaseVersion"
    implementation "com.google.android.gms:play-services-ads:$firebaseVersion"
    implementation "com.google.firebase:firebase-crash:$firebaseVersion"
    implementation "com.firebaseui:firebase-ui-database:$firebaseDbUiVersion"

    // 3rd party libraries

    // Dagger
    // dependency injection
    implementation "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'javax.inject:javax.inject:1'

    // reactive
    implementation "io.reactivex.rxjava2:rxjava:$rxjava2Version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroidVersion"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlinVersion"

    // view binding
    implementation "com.jakewharton:butterknife:$butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterknifeVersion"
    // kapt "com.jakewharton:butterknife-compiler:$butterknifeVersion"

    // Anko Commons
    implementation "org.jetbrains.anko:anko-commons:$ankoVersion"

    // Facbook
    implementation "com.facebook.android:facebook-android-sdk:$facebookSdkVersion"

    //fab
    implementation "com.getbase:floatingactionbutton:$fabVersion"

    //MATERIAL DRAWER
    implementation("com.mikepenz:materialdrawer:$mikePenzDrawerVersion") {
        transitive = true
    }

    // about libraries
    implementation("com.mikepenz:aboutlibraries:$mikePenzAbtLibrariesVersion") {
        transitive = true
    }
    implementation "com.mikepenz:itemanimators:$mikePenzItemAnimators"
    implementation "com.mikepenz:crossfader:$mikePenzCrossFaderVersion"
    implementation "com.mikepenz:crossfadedrawerlayout:$mikePenzCrossFadedDrawer"

    // crashlytics
    implementation("com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion") {
        transitive = true
    }

    implementation("com.crashlytics.sdk.android:answers:$crashlyticsAnswersVersion") {
        transitive = true
    }

    // Twitter
    implementation("com.twitter.sdk.android:twitter:$twitterSdkVersion") {
        transitive = true
    }
    // circle image view
    implementation "de.hdodenhof:circleimageview:$circleImageViewVersion"

    // glide version
    implementation "com.github.bumptech.glide:glide:$glideVersion"

    // app intro
    implementation "com.github.paolorotolo:appintro:$appintroVersion"

    // Testing dependencies
    //-------------------------------------------------------------------------------------

    // Instrumented tests
    androidTestImplementation("com.android.support.test.espresso:espresso-contrib:$espressoContribVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "org.mockito:mockito-core:$mockitoVersion"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    //Unit Tests
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "junit:junit:$jUnitVersion"
    testRuntimeOnly "org.jetbrains.spek:spek-junit-platform-engine:$spekJunitEngVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    testImplementation "com.jakewharton:butterknife:$butterknifeVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mockWebServerVersion"
    testImplementation "org.jetbrains.spek:spek-api:$spekVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.hamcrest:hamcrest-library:$hamcrestVersion"

    // Fix for https://github.com/robolectric/robolectric/issues/2566
    testImplementation "org.khronos:opengl-api:gl1.1-android-2.1_r1"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
}

apply plugin: "com.google.gms.google-services"
